import Head from "next/head";
import { consume, Fiona, Sample } from "../../app";
import JsonGraphqlServer from "json-graphql-server";
import { rest, setupWorker } from "msw";

process.browser &&
  import("pretender").then(({ default: Pretender }) => {
    window.Pretender = Pretender;

    const pretender = new Pretender();

    const modelMock = (seed) =>
      Fiona(seed).object({
        fullname: (seeded) => seeded.fullname(),
        color: (seeded) => seeded.oneOf(["red", "yellow", "blue"]),
        age: (seeded) => seeded.number({ max: 100 }),
      });

    pretender.get("/pretend/user/:id", (request) => [
      200,
      { "Content-Type": "application/json" },
      JSON.stringify(modelMock(request.params.id)),
    ]);

    const data = Fiona().object({
      users: Fiona.Array(10, (fiona) => {
        // TODO: get fiona to pass current array index into function
        const index = fiona.info().path.toString().match(/(\d+)/m)[1];
        return modelMock(index);
      }),
    });

    const server = process.browser ? JsonGraphqlServer({ data }) : () => {};

    const handler = server.getHandler();

    pretender.post("/graphql", async (req) => {
      const { status, headers, body } = await handler(req);
      return [status, headers, body];
    });

    pretender.get("/*all", pretender.passthrough);
    pretender.post("/*all", pretender.passthrough);

    window.rest = rest; // eslint-disable-line
    window.setupWorker = setupWorker; // eslint-disable-line
    const worker = setupWorker(
      rest.get('/fake/user/:id', (request, response, ctx) => {
        return response(
          // ctx.delay(1500),
          ctx.status(202, 'Mocked status'),
          ctx.json(modelMock(request.params.id)),
        )
      }),
    )
    worker.start()
  });

const Section = ({ seed }) => (
  <section>
    <h3>Mocking with Service Worker</h3>
    <p>
      Assuming some kind of setup code loading{" "}
      <a href="https://mswjs.io/">Mock Service Worker</a>
    </p>
    <Sample lang="js">
      {`import { setupWorker, rest } from 'msw'`}
    </Sample>
    <p>You can define a mock server like this...</p>
    <Sample>
      {`
    const worker = setupWorker(
      rest.get('/fake/user/:id', (request, response, ctx) => {
        return response(
          ctx.status(202, 'Mocked status'),
          ctx.json(modelMock(request.params.id)),
        )
      }),
    )
    worker.start()
    `}
    </Sample>
    <p>
      Specified routes will now be handled by the mock service worker with
      results generated by Fiona.
    </p>
    <Sample
      input={`
    fetch('/fake/user/${seed}').then(r => r.json()).then(console.log)
    `}
      output={`
    ${
        JSON.stringify(
          Fiona(seed.toString()).object({
            fullname: (seeded) => seeded.fullname(),
            color: (seeded) => seeded.oneOf(["red", "yellow", "blue"]),
            age: (seeded) => seeded.number({ max: 100 }),
          }),
        )
      }
    `}
    />
    <h3>Mocking `fetch` with Fetch Pretender</h3>
    <p>
      Assuming some kind of setup code loading{" "}
      <a href="https://github.com/sstur/fetch-pretender">Fetch Pretender</a>
    </p>
    <Sample lang="html">
      {`
    <script src="https://cdn.rawgit.com/billymoon/fetch-pretender/master/dist/pretender.js"></script>
    `}
    </Sample>
    <p>You can define a mock server like this...</p>
    <Sample>
      {`
    const pretender = new Pretender()

    const modelMock = seed => Fiona(seed).object({
      fullname: seeded => seeded.fullname(),
      color: seeded => seeded.oneOf(['red', 'yellow', 'blue']),
      age: seeded => seeded.number({ max: 100 })
    })

    pretender.get('/pretend/user/:id', request => [
      200,
      { 'Content-Type': 'application/json' },
      JSON.stringify(modelMock(request.params.id))
    ])    
    `}
    </Sample>
    <p>
      Calls to fetch on specified routes will now be patched to return mock
      results generated by Fiona.
    </p>
    <Sample
      input={`
    fetch('/pretend/user/${seed}').then(r => r.json()).then(console.log)
    `}
      output={`
    ${
        JSON.stringify(
          Fiona(seed.toString()).object({
            fullname: (seeded) => seeded.fullname(),
            color: (seeded) => seeded.oneOf(["red", "yellow", "blue"]),
            age: (seeded) => seeded.number({ max: 100 }),
          }),
        )
      }
    `}
    />
    <h3>Mock GraphQL Server with Fetch Pretender</h3>
    <Sample>
      {`
    import JsonGraphqlServer from 'json-graphql-server'
    const pretender = new Pretender()

    const data = Fiona().object({
      users: Fiona.Array(10, seeded => {
        const index = seeded.info().path.slice(-1)[0]
        return modelMock(index)
      })
    })

    const server = JsonGraphqlServer({ data })

    const handler = server.getHandler()

    pretender.post('/graphql', async req => {
      const { status, headers, body } = await handler(req)
      return [status, headers, body]
    })
    `}
    </Sample>
    <Sample
      input={`
        fetch('/graphql', {
          method: 'POST',
          body: \`{"query": "query users { allUsers { fullname, age } }"}\`
        }).then(r => r.json()).then(console.log)
      `}
      output={Fiona().json({
        posts: Fiona.Array(5, (seeded) =>
          Fiona(seeded.info().path.slice(-1)[0]).object({
            fullname: (seeded) =>
              seeded.fullname(),
            color: (seeded) => seeded.oneOf(["red", "yellow", "blue"]),
            age: (seeded) => seeded.number({ max: 100 }),
          })),
      })}
    />
    <div className="clearfix" />
  </section>
);

export default consume(Section);
